// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // Relaciones

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  address       UserAddress?

  Order Order[]
}

model Country {
  id          String        @id
  name        String
  UserAddress UserAddress[]

  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String
  postalCode String
  phone      String
  city       String
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique

  country   Country @relation(fields: [countryId], references: [id])
  countryId String
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  taxt         Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?
  createdAt    DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem OrderItem[]

  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String
  postalCode String
  phone      String
  city       String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

model Good {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  price       Float  @default(0)
  category_id Int?

  // Relations
  category GoodCategory? @relation(fields: [category_id], references: [id])
  images   GoodImage[]

  @@map("good")
}

model GoodCategory {
  id        Int    @id @default(autoincrement())
  name      String
  slug      String @unique @default("")
  parent_id Int?

  // Self-relation
  parent   GoodCategory?  @relation("CategoryParent", fields: [parent_id], references: [id])
  children GoodCategory[] @relation("CategoryParent")

  goods Good[] // üëà –î–æ–±–∞–≤–ª–µ–Ω–æ —ç—Ç–æ –ø–æ–ª–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å)

  @@map("good_category")
}

model GoodImage {
  id      Int    @id @default(autoincrement())
  url     String
  good_id Int

  // Relations
  good Good @relation(fields: [good_id], references: [id])

  @@map("good_image")
}
